// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MYSQL_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                  String  @id @default(cuid())
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String? @db.Text
  access_token        String? @db.Text
  expires_at          Int?
  refresh_expires_in  Int?
  token_type          String?
  not_before_policy   Int?
  id_token_expires_in Int?
  scope               String?
  id_token            String? @db.Text
  session_state       String?
  not_before          Int?
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  verificationSession VerificationSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Verification {
  id                    String               @id @default(cuid())
  vrn                   String
  metadata              Json
  verificationSessionId String?
  verificationSession   VerificationSession? @relation(fields: [verificationSessionId], references: [id], onDelete: SetNull)
  status                VrnStatus            @default(UNVERIFIED)
  updatedVrn            String?

  createdAt DateTime @default(now())
}

model VerificationSession {
  id                 String         @id @default(cuid())
  startedAt          DateTime       @default(now())
  completedAt        DateTime?
  lastUpdated        DateTime       @default(now())
  userId             String
  verificationCursor Int            @default(0)
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  Verification       Verification[]
}

enum VrnStatus {
  UNVERIFIED
  REJECTED
  ACCEPTED
  CORRECTED
}
